# Generated by Django 2.1 on 2020-01-18 20:38

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('username', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Username')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EmailList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=60, null=True, verbose_name='Name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_image', models.ImageField(default=None, upload_to='photos')),
                ('watermarked_image', models.ImageField(blank=True, default=None, null=True, upload_to='wartermarked_photos')),
            ],
        ),
        migrations.CreateModel(
            name='WaterMark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('water_mark_image', models.ImageField(default=None, help_text='You can add atmost one WaterMark image', upload_to='water_mark')),
            ],
        ),
        migrations.CreateModel(
            name='SpecUser',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('user_type', models.CharField(choices=[('developer', 'Developer'), ('lender', 'Lender'), ('banker', 'Banker'), ('dealer', 'Dealer'), ('homeowner', 'Prospective Homeowner'), ('Municipality/Government Official', 'Municipality/Government Official'), ('vendor', 'Vendor')], default=None, max_length=32, verbose_name='Sign up as')),
                ('company_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Name of Company')),
                ('title', models.CharField(blank=True, max_length=100, null=True, verbose_name='Title')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(help_text='XXX-XXX-XXXX', max_length=18, region=None, verbose_name='Phone Number')),
                ('dealer_no', models.CharField(blank=True, max_length=6, null=True, validators=[django.core.validators.RegexValidator('^[0-9]*$')], verbose_name='Dealer Number')),
                ('home_permission', models.BooleanField(default=None, verbose_name='Home Access')),
                ('content_permission', models.BooleanField(default=None, verbose_name='Content Access')),
                ('activation_time_home', models.DateTimeField(blank=True, null=True, verbose_name='Activation Time (Home)')),
                ('expire_time_home', models.DateTimeField(blank=True, null=True, verbose_name='Expire Time (Home)')),
                ('activation_time_spec_content', models.DateTimeField(blank=True, null=True, verbose_name='Activation Time (Content)')),
                ('expire_time_spec_content', models.DateTimeField(blank=True, null=True, verbose_name='Expire Time (Content)')),
            ],
            options={
                'verbose_name': 'Spec_User',
                'verbose_name_plural': 'Spec User',
            },
            bases=('users.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
