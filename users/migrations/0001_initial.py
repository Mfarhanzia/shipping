# Generated by Django 2.1 on 2020-02-09 18:41

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('username', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Username')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EmailList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=60, null=True, verbose_name='Name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_image', models.ImageField(default=None, upload_to='photos')),
                ('watermarked_image', models.ImageField(blank=True, default=None, null=True, upload_to='wartermarked_photos')),
            ],
        ),
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of_development', multiselectfield.db.fields.MultiSelectField(choices=[('select all', 'Select All'), ('Commercial', 'Commercial'), ('Mixed-use', 'Mixed-use'), ('Multi-tenant', 'Multi-tenant'), ('Condominium', 'Condominium'), ('Townhome', 'Townhome'), ('Man Camp', 'Man Camp'), ('Mobile Home Park', 'Mobile Home Park'), ('RV Park', 'RV Park'), ('Park Home (as defined by Housing and Urban Development)', 'Park Home (as defined by Housing and Urban Development)'), ('Other', 'Other')], max_length=300, verbose_name='What type of development(s) are you seeking?')),
                ('other_type_of_development', models.CharField(blank=True, max_length=300, null=True, verbose_name='Other')),
                ('type_of_smart_home', multiselectfield.db.fields.MultiSelectField(choices=[('Automated Home Shopping and Delivery', 'Automated Home Shopping and Delivery'), ('Self-Driving Transport to Local Shopping Centers', 'Self-Driving Transport to Local Shopping Centers'), ('Self-Driving Transport to Local Medical Facilities', 'Self-Driving Transport to Local Medical Facilities')], max_length=300, verbose_name='What type of smart home functionality are you interested in learning more about? ')),
                ('type_of_electric_vehicle_function', multiselectfield.db.fields.MultiSelectField(choices=[('Standard', 'Standard'), ('Capability to Load Handicapped Person Without Human Assistance', 'Capability to Load Handicapped Person Without Human Assistance')], max_length=300, verbose_name='An electric vehicle will be included with each housing unit. What type of electric vehicle function are you interested in?')),
                ('learn_about_electric_drive', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=100, verbose_name='Do you wish to learn more about an optional electric-drive community transport vehicle?')),
            ],
            options={
                'verbose_name': 'UserPreference',
                'verbose_name_plural': 'UserPreferences',
            },
        ),
        migrations.CreateModel(
            name='WaterMark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('water_mark_image', models.ImageField(default=None, help_text='You can add atmost one WaterMark image', upload_to='water_mark')),
            ],
        ),
        migrations.CreateModel(
            name='SpecUser',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('user_type', models.CharField(choices=[('developer', 'Developer'), ('lender', 'Lender'), ('banker', 'Banker'), ('dealer', 'Dealer'), ('homeowner', 'Prospective Homeowner'), ('Municipality/Government Official', 'Municipality/Government Official'), ('vendor', 'Vendor')], default=None, max_length=32, verbose_name='Sign up as')),
                ('company_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Name of Company')),
                ('title', models.CharField(blank=True, max_length=100, null=True, verbose_name='Title')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Optional', max_length=18, null=True, region=None, verbose_name='Phone Number')),
                ('dealer_no', models.CharField(blank=True, max_length=6, null=True, validators=[django.core.validators.RegexValidator('^[0-9]*$')], verbose_name='Dealer Number')),
                ('home_permission', models.BooleanField(default=False, verbose_name='Home Access')),
                ('content_permission', models.BooleanField(default=False, verbose_name='Content Access')),
                ('activation_time_home', models.DateTimeField(blank=True, null=True, verbose_name='Activation Time (Home)')),
                ('expire_time_home', models.DateTimeField(blank=True, null=True, verbose_name='Expire Time (Home)')),
                ('activation_time_spec_content', models.DateTimeField(blank=True, null=True, verbose_name='Activation Time (Content)')),
                ('expire_time_spec_content', models.DateTimeField(blank=True, null=True, verbose_name='Expire Time (Content)')),
            ],
            options={
                'verbose_name': 'Spec_User',
                'verbose_name_plural': 'Spec User',
            },
            bases=('users.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='userpreferences',
            name='user_obj',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.SpecUser'),
        ),
    ]
